{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Message/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","s","dialog","active","to","id","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","isAuth","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,8GCWlMC,EARE,SAACC,GAChB,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASC,GAAI,YAAcL,EAAMM,GAAjC,SAAsCN,EAAMO,UCGvCC,EAPD,SAACR,GACf,OACI,qBAAKC,UAAWC,IAAEO,QAAlB,SAA4BT,EAAMS,W,kCCClCC,EAAcC,YAAiB,IAiBtBC,cAAU,CAErBC,KAAM,wBAFKD,EAfQ,SAACZ,GACpB,OACI,uBAAMc,SAAUd,EAAMe,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUV,GACrBH,KAAK,iBAAiBc,YAAY,yBAE7C,8BACI,kDCoBDC,EA9BC,SAACtB,GACb,IAAIuB,EAAQvB,EAAMwB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuBrB,KAAMqB,EAAErB,KAAMD,GAAIsB,EAAEtB,IAA1BsB,EAAEtB,OAC5DuB,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoBtB,QAASsB,EAAEtB,SAAjBsB,EAAEzB,OAS/D,OAAKN,EAAMgC,OAGP,sBAAK/B,UAAWC,IAAEwB,QAAlB,UACI,qBAAKzB,UAAWC,IAAE+B,aAAlB,SACKR,IAGL,sBAAKxB,UAAWC,IAAE4B,SAAlB,UACI,8BAAMD,IAEN,cAAC,EAAD,CAAqBf,SAhBb,SAACoB,GACjBlC,EAAMmC,YAAYD,EAAOE,yBAIH,cAAC,IAAD,CAAU/B,GAAG,Y,+CCdvCgC,EAA6B,SAACd,GAAD,MAAY,CACzCS,OAAQT,EAAMe,KAAKN,S,OCgBRO,sBACXC,aAjBoB,SAACjB,GACvB,MAAO,CACHC,YAAaD,EAAMC,gBAKE,SAACiB,GACxB,MAAO,CACHN,YAAa,SAACC,GACVK,EAASC,YAAmBN,UDLR,SAACO,GAAe,IAEtCC,EAFqC,4JAGvC,WAEI,OAAKC,KAAK7C,MAAMgC,OAMT,cAACW,EAAD,eAAeE,KAAK7C,QAJnB,cAAC,IAAD,CAAUK,GAAG,eAPc,GAEXyC,IAAMH,WAgBtC,OAFqCH,YAAQH,EAARG,CAAqCI,KCL/DL,CAGbjB","file":"static/js/4.02a84569.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3qp5d\",\"dialogsItems\":\"Dialogs_dialogsItems__1-x8V\",\"active\":\"Dialogs_active__3ALTt\",\"dialog\":\"Dialogs_dialog__myiT8\",\"messages\":\"Dialogs_messages__2AivQ\",\"message\":\"Dialogs_message__3h0Su\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport  default  DialogItem;","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n  return (\r\n      <div className={s.message}>{props.message}</div>\r\n  );\r\n};\r\n\r\n\r\nexport  default  Message;","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\n// Валидация по максимальному кол-ву элементов\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength50]}\r\n                       name=\"newMessageBody\" placeholder=\"Enter your message\"/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default reduxForm({\r\n    // a unique name for the form (уникальное имя для данной формы)\r\n    form: 'dialogAddMessageForm'\r\n}) (AddMessageForm);","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\"\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddMessageReduxForm from \"./Message/AddMessageForm\";\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>);\r\n\r\n\r\n    // Функция для onSubmit (redux-form)\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    };\r\n\r\n    // Redirect\r\n    if (!props.isAuth) return <Redirect to=\"/login\" />\r\n    //\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n\r\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;","import React, {Component} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n// Данные (props) небходимые HOC\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\n// HOC\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            // Redirect при отсутствие авторизации\r\n            if (!this.props.isAuth) {\r\n                return (\r\n                    <Redirect to='/login' />\r\n                );\r\n            };\r\n\r\n            return <Component {...this.props} />;\r\n        }\r\n    }\r\n\r\n    // Снабжение HOC необходимыми данными (props) с помощью connect (доп. оберткой)\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from \"react\";\r\nimport {sendMessageCreator} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      dialogsPage: state.dialogsPage,\r\n  }\r\n};\r\n\r\n// Длинная версия mapDispatchToProps\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    };\r\n};\r\n\r\n// Функция compose (хорошая практика)\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect  // Работа с HOC\r\n)(Dialogs)\r\n\r\n\r\n// Аналог (плохая практика)\r\n// // Работа с HOC\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps) (AuthRedirectComponent);\r\n\r\n// export default DialogsContainer;"],"sourceRoot":""}