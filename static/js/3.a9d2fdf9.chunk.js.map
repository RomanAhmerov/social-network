{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","updateStatus","onChange","e","currentTarget","value","autoFocus","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","Preloader","Post","item","alt","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","memo","postsElements","posts","reverse","map","p","id","postsBlock","AddNewPostReduxForm","onSubmit","formData","addPost","newPostText","reduxForm","form","handleSubmit","Field","component","Textarea","name","validate","required","placeholder","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","isAuth","auth","withRouter"],"mappings":"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","file":"static/js/3.a9d2fdf9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1frk3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__MfjTq\",\"posts\":\"MyPosts_posts__3EET9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3ui-P\"};","import React, {useEffect, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n        // Hook useState\r\n        // local state 1 (editMode)\r\n        let [editMode, setEditMode]  = useState(false);\r\n\r\n        const activateMode = () => {\r\n                setEditMode(true); // Изменение режима редактирования в local state\r\n        }\r\n\r\n        const deactivateEditMode = () => {\r\n                setEditMode(false); // // Изменение режима редактирования в local state\r\n                props.updateStatus(status); // Изменение status в state\r\n        }\r\n\r\n        // local state 2 (status)\r\n        let [status, setStatus]  = useState(props.status);\r\n\r\n        const onStatusChange = (e) => {\r\n                setStatus(e.currentTarget.value) //Изменение status в local state\r\n        }\r\n\r\n        // Hook useEffect (выполняемая функция, [данные от которых зависит выполнение функции])\r\n        // Синхронизация локального state актуальными данными\r\n        useEffect( () => {\r\n                setStatus(props.status);\r\n        }, [props.status]);\r\n\r\n        return (\r\n            <div>\r\n                {/* Режим редактирования ВЫКЛ - false */}       \r\n                { !editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={activateMode}>{props.status || '--------'}</span>\r\n                    </div>\r\n                }\r\n\r\n                {/* Режим редактирования ВКЛ - true */}\r\n                {editMode &&\r\n                    <div>\r\n                        <input onBlur={deactivateEditMode}\r\n                               onChange={onStatusChange} value={status}\r\n                               autoFocus={true}  />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\n// import ProfileStatus from \"./ProfileStatus\"; // Контейнерная компонента\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large} />\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTG7ZHHUdN_3p6I5EAb0khNR1ESNmRw_z-vLgs-qma5nH4xSxAGC38uSZ9rldLMUTmGkfw&usqp=CAU\" alt=\"ava\" />\r\n            \r\n            {props.message}\r\n            \r\n            <div>\r\n                <span>like {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\"; // Новая версия\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n// Создатель валидатора\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let postsElements = [...props.posts]\r\n        .reverse()\r\n        .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    // Старая версия (*)\r\n    // let newPostElement = React.createRef();\r\n    //\r\n    // let onAddPost = () => {\r\n    //     props.addPost();\r\n    // };\r\n    //\r\n    // let onPostChange = () => {\r\n    //     let text = newPostElement.current.value;\r\n    //     props.updateNewPostText(text);\r\n    // };\r\n\r\n\r\n    // Новая версия\r\n    let onAddPost = (formData) => {\r\n        props.addPost(formData.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n\r\n            {/*    /!*Старая версия (*) *!/*/}\r\n            {/*<div>*/}\r\n            {/*    New post*/}\r\n            {/*    <div>*/}\r\n            {/*        <textarea ref={newPostElement} value={props.newPostText} onChange={onPostChange} />*/}\r\n            {/*    </div>*/}\r\n\r\n            {/*    <div>*/}\r\n            {/*        <button onClick={onAddPost}>Add post</button>*/}\r\n            {/*    </div>*/}\r\n            {/*</div>*/}\r\n\r\n            {/*Новая версия*/}\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\n// Новая версия\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            New post\r\n            <div>\r\n                <Field component={Textarea} name=\"newPostText\" validate={[required, maxLength10]} placeholder=\"Post message\" />\r\n            </div>\r\n\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\n// Новая версия\r\nconst AddNewPostReduxForm = reduxForm(\r\n    {\r\n        // a unique name for the form (уникальное имя для данной формы)\r\n        form: 'profile'\r\n    }\r\n) (AddNewPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        // newPostText: state.profilePage.newPostText // Старая версия (*)\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        },\r\n\r\n        // Старая версия (*)\r\n        // updateNewPostText: (text) => {\r\n        //     dispatch(updateNewPostTextActionCreator(text))\r\n        // }\r\n    };\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {getUserProfile, getStatus, updateStatus} from \"../../redux/profileReducer\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    // При завершения отрисовки компоненты (метод жизненного цикла)\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n\r\n            // Плохая практика (применять только в исключительных случиях) (это аналог <Redirect to=\"/login\" />)\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        };\r\n\r\n        // Получение Profile dispatch(thunk)\r\n        this.props.getUserProfile(userId);\r\n\r\n        // Получение Status (статуса пользователя) dispatch(thunk)\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus} />\r\n        );\r\n    }\r\n};\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    isAuth: state.auth.isAuth,\r\n    authorizedUserId: state.auth.userId\r\n});\r\n\r\n// Функция compose (хорошая практика)\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // withAuthRedirect // Работа с HOC\r\n) (ProfileContainer);\r\n\r\n// Аналог (плохая практика)\r\n// // Работа с HOC\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n//\r\n//\r\n// // Дополнительная контейнерная компонента для передачи URL параметра\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n//\r\n// // connect с коротокой записью mapStateToDispatch (второй параметр)\r\n// export default connect(mapStateToProps, {getUserProfile}) (WithUrlDataContainerComponent);"],"sourceRoot":""}