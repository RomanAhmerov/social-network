{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","updateStatus","onChange","e","currentTarget","value","autoFocus","ProfileDataReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","Field","placeholder","name","component","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","target","files","length","formData","then","initialValues","Post","item","alt","message","likesCount","MyPosts","maxLengthCreator","React","memo","postsElements","posts","reverse","p","id","postsBlock","AddNewPostReduxForm","addPost","newPostText","reset","validate","required","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","isAuth","auth","withRouter"],"mappings":"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","file":"static/js/3.96181505.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1frk3\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1icQS\",\"contact\":\"ProfileInfo_contact__qULns\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__MfjTq\",\"posts\":\"MyPosts_posts__3EET9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3ui-P\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\n// Type (TS)\r\ntype PropsType = {\r\n        status: string\r\n        updateStatus: (status: string) => void\r\n}\r\n\r\n// FC\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n        // Hook useState\r\n        // local state 1 (editMode)\r\n        let [editMode, setEditMode]  = useState(false);\r\n\r\n        const activateMode = () => {\r\n                setEditMode(true); // Изменение режима редактирования в local state\r\n        }\r\n\r\n        const deactivateEditMode = () => {\r\n                setEditMode(false); // // Изменение режима редактирования в local state\r\n                props.updateStatus(status); // Изменение status в state\r\n        }\r\n\r\n        // local state 2 (status)\r\n        let [status, setStatus]  = useState(props.status);\r\n\r\n        const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n                setStatus(e.currentTarget.value) //Изменение status в local state\r\n        }\r\n\r\n        // Hook useEffect (выполняемая функция, [данные от которых зависит выполнение функции])\r\n        // Синхронизация локального state актуальными данными\r\n        useEffect( () => {\r\n                setStatus(props.status);\r\n        }, [props.status]);\r\n\r\n        return (\r\n            <div>\r\n                {/* Режим редактирования ВЫКЛ - false */}       \r\n                { !editMode &&\r\n                    <div>\r\n                       <b>Status:</b> <span onDoubleClick={activateMode}>{props.status || '--------'}</span>\r\n                    </div>\r\n                }\r\n\r\n                {/* Режим редактирования ВКЛ - true */}\r\n                {editMode &&\r\n                    <div>\r\n                        <input onBlur={deactivateEditMode}\r\n                               onChange={onStatusChange} value={status}\r\n                               autoFocus={true}  />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport style from \"./../../../common/FormsControls/FormControls.module.css\";\r\nimport s from \"./../ProfileInfo.module.css\";\r\nimport {ProfileType} from \"../../../../types/types\";\r\n\r\n// Type (TS)\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileFormValuesType = {}\r\n\r\n// FC\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileFormValuesType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button>Save</button></div>\r\n\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div> }\r\n\r\n            <div>\r\n                <b>Full name:</b> <Field placeholder=\"Full name\" name=\"fullName\" component={Input} />\r\n            </div>\r\n\r\n            <div>\r\n                <b>Looking for a job:</b> <Field name=\"lookingForAJob\" component={Input} type=\"checkbox\" />\r\n            </div>\r\n\r\n            <div>\r\n                <b>My professional skills:</b> <Field placeholder=\"My professional skills\" name=\"lookingForAJobDescription\" component={Textarea}  />\r\n            </div>\r\n\r\n            <div>\r\n                <b>About me:</b> <Field placeholder=\"About me\" name=\"aboutMe\" component={Textarea}  />\r\n            </div>\r\n\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                return (\r\n                    <div key={key} className={s.contact}>\r\n                        <b>{key}:</b> <Field placeholder={key} name={\"contacts.\" + key} component={Input}/>\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// HOC (reduxForm)\r\nconst ProfileDataReduxForm = reduxForm<ProfileFormValuesType, PropsType>({form: 'edit-profile'}) (ProfileDataForm);\r\n\r\nexport default ProfileDataReduxForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm/ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from '../../../types/types';\r\n\r\n// Type (TS)\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => any\r\n}\r\n\r\n// FC\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    // Hook useState\r\n    // local state (editMode)\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n\r\n\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelect = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // todo: remove then\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                {/* Аватарка пользователя */}\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <input type=\"file\" onChange={onMainPhotoSelect}/>}\r\n\r\n                {/* Информация о пользователе */}\r\n                {editMode ?\r\n                    <ProfileDataForm onSubmit={onSubmit as any} initialValues={profile} profile={profile} /> :\r\n                    <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }}/>}\r\n\r\n                {/* Статус пользователя */}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Type (TS)\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\n// FC\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode}>Edit</button>\r\n            </div>}\r\n\r\n            <div>\r\n                <b>Full name:</b> {profile.fullName}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n            </div>}\r\n\r\n            <div>\r\n                <b>About me:</b> {profile.aboutMe}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Contacts:</b> {Object\r\n                .keys(profile.contacts)\r\n                .map((key) => {\r\n                return (\r\n                    <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                )\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// Type (TS)\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\n\r\n// FC\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={s.contact}>\r\n            <b>{contactTitle}:</b> {contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\n// Type (TS)\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\n// FC\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTG7ZHHUdN_3p6I5EAb0khNR1ESNmRw_z-vLgs-qma5nH4xSxAGC38uSZ9rldLMUTmGkfw&usqp=CAU\" alt=\"ava\" />\r\n            \r\n            {props.message}\r\n            \r\n            <div>\r\n                <span>like {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, FormAction, InjectedFormProps, reduxForm} from \"redux-form\"; // Новая версия\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\n// Создатель валидатора\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\n// Type (TS)\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n    reset: (form: string) => FormAction\r\n}\r\n\r\n// FC\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = React.memo(props => {\r\n    let postsElements = [...props.posts]\r\n        .reverse()\r\n        .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n\r\n    let onAddPost = (formData: AddPostFormValuesType) => {\r\n        props.addPost(formData.newPostText);\r\n        props.reset('profile')\r\n    };\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n// Форма для добавления постов\r\n// Type (TS)\r\ntype PropsFormType = {}\r\ntype AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\n// FC\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsFormType> & PropsFormType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            New post\r\n            <div>\r\n                <Field component={Textarea} name=\"newPostText\" validate={[required]} placeholder=\"Post message\" />\r\n            </div>\r\n\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\n\r\n// Обертка формы от ReduxForm\r\nconst AddNewPostReduxForm = reduxForm<AddPostFormValuesType, PropsFormType>(\r\n    {\r\n        // a unique name for the form (уникальное имя для данной формы)\r\n        form: 'profile'\r\n    }\r\n) (AddNewPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {actions} from \"../../../redux/profileReducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {reset} from \"redux-form\";\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    };\r\n};\r\n\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {addPost: actions.addPostActionCreator, reset}) (MyPosts);\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\n// Type (TS)\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    isOwner: boolean\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\n// FC\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status}\r\n                         updateStatus={props.updateStatus} isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}\r\n            />\r\n\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile} from \"../../redux/profileReducer\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\n\r\n// Type (TS)\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\n\r\n// CC\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    // Метод обновления данных профиля\r\n    refreshProfile() {\r\n        let userId: number | null  = +this.props.match.params.userId;\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n\r\n            // Плохая практика (применять только в исключительных случиях) (это аналог <Redirect to=\"/login\" />)\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        };\r\n\r\n        if (!userId) {\r\n            console.error(\"ID should exist in URI params or in state ('authorizedUserId')\")\r\n        } else {\r\n            // Получение Profile dispatch(thunk)\r\n            this.props.getUserProfile(userId);\r\n\r\n            // Получение Status (статуса пользователя) dispatch(thunk)\r\n            this.props.getStatus(userId);\r\n        }\r\n    }\r\n\r\n\r\n    // При завершения отрисовки компоненты (метод жизненного цикла)\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    // Перерисовка компоненты при изменении (props или state) (метод жизненного цикла)\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        // Условный оператор для предотвращения зацикливания\r\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    isAuth: state.auth.isAuth,\r\n    authorizedUserId: state.auth.userId\r\n});\r\n\r\n\r\n// Функция compose (хорошая практика)\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n) (ProfileContainer);\r\n\r\n// Аналог (плохая практика)\r\n// // Работа с HOC\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n//\r\n//\r\n// // Дополнительная контейнерная компонента для передачи URL параметра\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n//\r\n// // connect с коротокой записью mapStateToDispatch (второй параметр)\r\n// export default connect(mapStateToProps, {getUserProfile}) (WithUrlDataContainerComponent);"],"sourceRoot":""}