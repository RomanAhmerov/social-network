{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Message/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","s","dialog","active","to","id","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","reset","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oGCkBlMC,EARuB,SAACC,GACrC,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASC,GAAI,YAAcL,EAAMM,GAAjC,SAAsCN,EAAMO,UCEvCC,EAPoB,SAACR,GACpC,OACI,qBAAKC,UAAWC,IAAEO,QAAlB,SAA4BT,EAAMS,W,kCCAlCC,EAAcC,YAAiB,IAmBtBC,cAAoC,CAE/CC,KAAM,wBAFKD,EAhBsF,SAACZ,GAClG,OACI,uBAAMc,SAAUd,EAAMe,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUV,GACrBH,KAAK,iBAAiBc,YAAY,yBAE7C,8BACI,kDCqBDC,EA5BsB,SAACtB,GAClC,IAAIuB,EAAQvB,EAAMwB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuBrB,KAAMqB,EAAErB,KAAMD,GAAIsB,EAAEtB,IAA1BsB,EAAEtB,OAC5DuB,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoBtB,QAASsB,EAAEtB,SAAjBsB,EAAEzB,OAS/D,OACI,sBAAKL,UAAWC,IAAEwB,QAAlB,UACI,qBAAKzB,UAAWC,IAAE8B,aAAlB,SACKP,IAGL,sBAAKxB,UAAWC,IAAE4B,SAAlB,UACI,8BAAMD,IAEN,cAAC,EAAD,CAAqBf,SAfb,SAACmB,GACjBjC,EAAMkC,YAAYD,EAAOE,gBACzBnC,EAAMoC,MAAM,kC,qCClBhBC,EAA6B,SAACd,GAAD,MAA0B,CACvDe,OAAQf,EAAMgB,KAAKD,S,oBCSRE,sBACXC,aAToB,SAAClB,GACvB,MAAO,CACHC,YAAaD,EAAMC,eAOd,YAAC,eAAqBkB,KAAtB,IAA+BN,cDCnC,SAA0BO,GAiB7B,OAAOF,YAAQJ,EAARI,EAfP,SAA2BzC,GACvB,IAAOsC,EAAwBtC,EAAxBsC,OAAWM,EAAlB,YAA+B5C,EAA/B,GAGA,OAAKsC,EAOE,cAACK,EAAD,eAAsBC,IALrB,cAAC,IAAD,CAAUvC,GAAG,gBCVdmC,CAGblB","file":"static/js/4.b7935280.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3qp5d\",\"dialogsItems\":\"Dialogs_dialogsItems__1-x8V\",\"active\":\"Dialogs_active__3ALTt\",\"dialog\":\"Dialogs_dialog__myiT8\",\"messages\":\"Dialogs_messages__2AivQ\",\"message\":\"Dialogs_message__3h0Su\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n// Type (TS)\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\n// FC\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport  default  DialogItem;","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\n// Type (TS)\r\ntype PropsType = {\r\n  message: string\r\n}\r\n\r\n// FC\r\nconst Message: React.FC<PropsType> = (props) => {\r\n  return (\r\n      <div className={s.message}>{props.message}</div>\r\n  );\r\n};\r\n\r\n\r\nexport  default  Message;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\n// Type (TS)\r\ntype PropsType = {}\r\ntype NewMessageFormValuesType = {newMessageBody: string}\r\n\r\n\r\n// Валидация по максимальному кол-ву элементов\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\n// FC\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength50]}\r\n                       name=\"newMessageBody\" placeholder=\"Enter your message\"/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({\r\n    // a unique name for the form (уникальное имя для данной формы)\r\n    form: 'dialogAddMessageForm',\r\n}) (AddMessageForm);","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddMessageReduxForm from \"./Message/AddMessageForm\";\r\nimport {InitialStateType} from \"../../redux/dialogsReducer\";\r\nimport {FormAction} from \"redux-form\";\r\n\r\n// Type (TS)\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n    reset: (form: string) => FormAction\r\n}\r\n\r\n// FC\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>);\r\n\r\n    // Функция для onSubmit (redux-form)\r\n    let addNewMessage = (values: {newMessageBody: string}) => {\r\n        props.sendMessage(values.newMessageBody);\r\n        props.reset('dialogAddMessageForm')\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n\r\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\n\r\n\r\n// Данные (props) небходимые HOC\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\n// Type (TS)\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\n// HOC\r\nexport function withAuthRedirect(WrappedComponent: React.ComponentType) {\r\n\r\n    function RedirectComponent(props:  MapPropsType) {\r\n        const {isAuth, ...restProps} = props;\r\n\r\n        // Redirect при отсутствие авторизации\r\n        if (!isAuth) {\r\n            return (\r\n                <Redirect to='/login'/>\r\n            );\r\n        }\r\n        ;\r\n\r\n        return <WrappedComponent {...restProps} />;\r\n    }\r\n\r\n    // Снабжение HOC необходимыми данными (props) с помощью connect (доп. оберткой)\r\n    return connect(mapStateToPropsForRedirect) (RedirectComponent);\r\n}","import React from \"react\";\r\nimport {actions} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {reset} from \"redux-form\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n      dialogsPage: state.dialogsPage,\r\n  }\r\n};\r\n\r\n\r\n// Функция compose (хорошая практика)\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions, reset}),\r\n    withAuthRedirect  // Работа с HOC\r\n)(Dialogs)\r\n\r\n\r\n// Аналог (плохая практика)\r\n// // Работа с HOC\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps) (AuthRedirectComponent);\r\n\r\n// export default DialogsContainer;"],"sourceRoot":""}