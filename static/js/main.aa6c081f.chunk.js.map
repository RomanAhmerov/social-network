{"version":3,"sources":["assets/images/user.png","api/api.ts","redux/dialogsReducer.ts","components/Users/User/user.module.css","components/Navbar/Navbar.module.css","components/Navbar/Navbar.tsx","utils/helpers/objectHelpers.ts","api/usersAPI.ts","redux/usersReducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User/User.tsx","components/Users/Users.tsx","redux/usersSelectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","api/authAPI.ts","api/securityAPI.ts","redux/authReducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/sidebarReducer.ts","redux/appReducer.ts","redux/reduxStore.ts","App.tsx","hoc/withSuspense.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormControls.module.css","utils/validators/validators.ts","assets/images/preloader.svg","components/common/Preloader/Preloader.tsx","components/common/Paginator/Paginator.module.css","components/Header/Header.module.css","api/profileAPI.ts","redux/profileReducer.ts"],"names":["ResultCodesEnum","ResultCodeForCaptchaEnum","instance","axios","create","baseURL","withCredentials","headers","initialState","dialogs","id","name","messages","message","actions","sendMessage","newMessageBody","type","dialogsReducer","state","action","body","module","exports","Navbar","className","s","nav","item","to","activeClassName","activeLink","disabled","updateObjectInArray","items","itemId","objPropName","newObjProps","map","i","usersAPI","getUsers","currentPage","pageSize","get","then","res","data","follow","userId","post","unfollow","delete","users","totalUsersCount","isFetching","followingInProgress","count","_followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","filter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","p","selectedPage","e","User","user","src","photos","small","userPhoto","alt","some","status","Users","props","u","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","requestUsers","this","pageTitle","Preloader","React","Component","compose","connect","bind","page","getState","totalCount","Header","header","loginBlock","isAuth","login","logout","authAPI","email","password","rememberMe","captcha","securityAPI","captchaUrl","payload","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","Field","component","Input","placeholder","validate","required","formSummaryError","loginData","CaptchaIsRequired","length","stopSubmit","_error","formData","sidebarReducer","initialized","appReducer","rootReducers","combineReducers","profilePage","profileReducer","dialogsPage","sidebar","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","WrappedComponent","DialogsContainer","lazy","SuspenseProfile","Suspense","fallback","App","initializeApp","from","path","render","AppContainer","withRouter","promise","Promise","all","SamuraiJSApp","ReactDOM","StrictMode","document","getElementById","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","value","maxLengthCreator","maxLength","values","preloader","style","backgroundColor","profileAPI","put","photoFile","FormData","append","profile","posts","likesCount","addPostActionCreator","newPostText","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","getUserProfile","getStatus","updateStatus","savePhoto","file","saveProfile","Error","reject","newPost"],"mappings":"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","file":"static/js/main.aa6c081f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/user.ab7efdc7.png\";","// DAL (Data Access Layer)\r\nimport axios from \"axios\";\r\nimport { UserType } from \"../types/types\";\r\n\r\n// Шаблон для API\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"797821ca-5e62-4458-9aa9-8c6476b8b275\"\r\n    }\r\n});\r\n\r\n\r\n// TypeAPI (TS)\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    resultCode: RC\r\n    messages: Array<string>\r\n}\r\n","import {InferActionsTypes} from \"./reduxStore\";\r\n\r\n// const SEND_MESSAGE = 'SN/DIALOGS/SEND-MESSAGE';\r\n\r\n// Type (TS)\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\n//\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrey'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'}\r\n    ] as Array<DialogType>,\r\n\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is are your it-kamasutra?'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'},\r\n    ] as Array<MessageType>\r\n};\r\n\r\n// Type (TS) (второй способ типизации)\r\nexport type InitialStateType = typeof initialState\r\n\r\n// Reducer\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/DIALOGS/SEND-MESSAGE':\r\n            let body = action.newMessageBody;\r\n\r\n            return  {...state, messages: [...state.messages, {id: 12, message: body}]};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// Type (TS)\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) => ({type: 'SN/DIALOGS/SEND-MESSAGE', newMessageBody} as const)\r\n}\r\n\r\nexport default  dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"user_userPhoto__sqLFn\",\"selectedPage\":\"user_selectedPage__5J-Pq\",\"paginationWrapper\":\"user_paginationWrapper__1Q_Pl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3orgJ\",\"item\":\"Navbar_item__30L5Y\",\"activeLink\":\"Navbar_activeLink__3HkE3\",\"disabled\":\"Navbar_disabled__1RYZ9\"};","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n\r\n            <div className={s.item}>\r\n                <a className={s.disabled}>News</a>\r\n            </div>\r\n\r\n            <div className={s.item}>\r\n                <a className={s.disabled}>Music</a>\r\n            </div>\r\n\r\n            <div className={s.item}>\r\n                <a className={s.disabled}>Settings</a>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((i: any) => {\r\n        if (i[objPropName] === itemId) {\r\n            return {...i, ...newObjProps};\r\n        }\r\n\r\n        return i;\r\n    });\r\n};","import {instance, GetItemsType, APIResponseType} from \"./api\";\r\n\r\nexport const usersAPI = {\r\n    // Users\r\n    getUsers(currentPage = 1, pageSize: number) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(res => {\r\n                return res.data\r\n            });\r\n    },\r\n\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n\r\n    // // Profile (переделегирование) (backward responsibility)\r\n    // getProfile(userId: number) {\r\n    //     console.warn('Obsolete method. Please use profileAPI object')\r\n    //     return profileAPI.getProfile(userId);\r\n    // }\r\n};","import {updateObjectInArray} from \"../utils/helpers/objectHelpers\";\r\n\r\nimport {UserType} from \"../types/types\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType, BaseThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {Action, Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/usersAPI\";\r\nimport {APIResponseType} from \"../api/api\";\r\n\r\n// Не нужно т.к. TS в reducer подсказывает тип на основе AС\r\n// const FOLLOW = 'SN/USERS/FOLLOW';\r\n// const UNFOLLOW = 'SN/USERS/UNFOLLOW';\r\n// const SET_USERS = 'SN/USERS/SET-USERS';\r\n// const SET_CURRENT_PAGE = 'SN/USERS/SET-CURRENT-PAGE';\r\n// const SET_TOTAL_USERS_COUNT = 'SN/USERS/SET-TOTAL-USERS-COUNT';\r\n// const TOGGLE_IS_FETCHING = 'SN/USERS/TOGGLE-IS-FETCHING';\r\n// const TOGGLE_IS_FOLLOWING_PROGRESS = 'SN/USERS/TOGGLE-IS-FOLLOWING-PROGRESS';\r\n\r\n\r\n// Type (TS)\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number> // array of users id's\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\n// Reducer\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            };\r\n\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            };\r\n\r\n        case 'SN/USERS/SET_USERS':\r\n            return {...state, users: action.users};\r\n\r\n        case 'SN/USERS/SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.currentPage};\r\n\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT':\r\n            return {...state, totalUsersCount: action.count};\r\n\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING':\r\n            return {...state, isFetching: action.isFetching};\r\n\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            };\r\n\r\n        default :\r\n            return state;\r\n    }\r\n};\r\n\r\n// Type (TS) (ActionsTypes)\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\n\r\n// Action creators\r\n// Type (TS)\r\n// AC\r\n// Общий AC\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: 'SN/USERS/SET_CURRENT_PAGE',\r\n        currentPage\r\n    } as const),\r\n\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\r\n        count: totalUsersCount\r\n    } as const),\r\n\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\r\n        isFetching\r\n    } as const),\r\n\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\n\r\n// export const followSuccess = (userId: number) => ({type: FOLLOW, userId});\r\n//\r\n// export const unfollowSuccess = (userId: number) => ({type: UNFOLLOW, userId});\r\n//\r\n// export const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users});\r\n//\r\n// export const setCurrentPage = (currentPage: number) => ({\r\n//     type: SET_CURRENT_PAGE,\r\n//     currentPage\r\n// });\r\n//\r\n// export const setTotalUsersCount = (totalUsersCount: number) => ({\r\n//     type: SET_TOTAL_USERS_COUNT,\r\n//     count: totalUsersCount\r\n// });\r\n//\r\n// export const toggleIsFetching = (isFetching: boolean) => ({\r\n//     type: TOGGLE_IS_FETCHING,\r\n//     isFetching\r\n// });\r\n//\r\n// export const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n//     type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n//     isFetching,\r\n//     userId\r\n// });\r\n\r\n\r\n// Thunk Creators\r\n// Type (TS)\r\n// Первый вариант типизации\r\n// type GetStateType = () => AppStateType\r\n// type DispatchType = Dispatch<ActionsTypes>\r\n\r\ntype ThunkType = BaseThunkType<ActionsTypes> // Второй вариант (рекомендасьон от Redux)\r\n\r\nexport const requestUsers = (page: number, pageSize: number): ThunkType => {\r\n    // Thunk\r\n    return async (dispatch, getState) => {\r\n        // getState - для примера (второй параметр thunk)\r\n        // const a = getState().bla.bla; (ошибка, такого нет)\r\n\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(page))\r\n\r\n        const data = await usersAPI.getUsers(page, pageSize);\r\n\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n    };\r\n};\r\n\r\n\r\n// (Функция для предотвращения дублирования (follow, unfollow))\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\r\n                                   userId: number,\r\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n\r\n    const response = await apiMethod(userId);\r\n\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n};\r\n\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    // Thunk\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\r\n    }\r\n};\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    // Thunk\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\r\n    };\r\n};\r\n\r\n\r\nexport default usersReducer;","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\n\r\n// Type (TS)\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber :number) => void\r\n    portionSize?: number\r\n}\r\n\r\n// FC\r\nconst Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n    // Кол-во страниц\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    // Кол-во порций\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n\r\n    // Local state\r\n    let [portionNumber, setPortionNumber] = useState<number>(1);\r\n\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span key={p} className={currentPage === p ? styles.selectedPage : \"\"}\r\n                                 onClick={(e) => {\r\n                                     onPageChanged(p)\r\n                                 }}>{p}</span>\r\n                })}\r\n\r\n            {portionNumber < portionCount &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>NEXT</button>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport styles from \"./user.module.css\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../../types/types\";\r\n\r\n\r\n// Type (TS)\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\n\r\n// FC\r\nconst User: React.FC<PropsType> = ({user, followingInProgress, follow, unfollow}) => {\r\n    return (\r\n        <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                             className={styles.userPhoto} alt=\"userPhoto\"/>\r\n                    </NavLink>\r\n                </div>\r\n\r\n                <div>\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {\r\n                                      unfollow(user.id);\r\n                                  }}>Unfollow</button>\r\n\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {\r\n                                      follow(user.id);\r\n                                  }}>Follow</button>}\r\n                </div>\r\n            </span>\r\n\r\n            <span>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n\r\n                <span>\r\n                    <div>{\"user.location.city\"}</div>\r\n                    <div>{\"user.location.country\"}</div>\r\n                </span>\r\n            </span>\r\n        </div>)\r\n\r\n};\r\n\r\nexport default User;","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User/User\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\n// Type (TS)\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber :number) => void\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\n// FC\r\nconst Users: React.FC<PropsType> = ({currentPage, totalUsersCount, pageSize, onPageChanged, users,\r\n                                        ...props}) => {\r\n    return (\r\n        <div>\r\n            <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n                       totalItemsCount={totalUsersCount} pageSize={pageSize}/>\r\n\r\n            <div>\r\n                {\r\n                    users.map(u => <User key={u.id} user={u}\r\n                                         followingInProgress={props.followingInProgress}\r\n                                         follow={props.follow}\r\n                                         unfollow={props.unfollow}/>)\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Users;","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n};\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n};\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    unfollow,\r\n    // Thunk\r\n    requestUsers\r\n} from \"../../redux/usersReducer\";\r\nimport Users from \"./Users\";\r\nimport styles from \"./usersContainer.module.css\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getUsers,\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount\r\n} from \"../../redux/usersSelectors\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\n\r\n// Type (TS)\r\ntype MapStatePropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    totalUsersCount: number\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    requestUsers: (currentPage: number, pageSize: number) => void\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n    pageTitle: string\r\n}\r\n\r\n// Общий тип props-ов\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\n\r\n\r\n// CC\r\n// class UsersContainer extends React.Component<PropsType, StateType> { ... } // Для расширенного примера\r\nclass UsersContainer extends React.Component<PropsType> {\r\n    // // Если конструктор только расширяет наш класс (см. ниже), то его можно не писать !\r\n    // constructor(props) {\r\n    //     super(props);\r\n    // }\r\n\r\n    // При успешной загрузке компонентов\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props;\r\n        this.props.requestUsers(currentPage, pageSize);\r\n    }\r\n\r\n    // Изменение страницы пользователей\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props;\r\n        this.props.requestUsers(pageNumber, pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <h2>{this.props.pageTitle}</h2>\r\n\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n\r\n    }\r\n}\r\n\r\n\r\n// Старая версия\r\n// let mapStateToProps = (state) => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// };\r\n\r\n\r\n// Новая версия\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n};\r\n\r\n\r\n// Функция compose (хорошая практика)\r\nexport default compose(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(\r\n        mapStateToProps,\r\n    {\r\n        follow,\r\n        unfollow,\r\n        // Thunk\r\n        requestUsers\r\n    }),\r\n    //withAuthRedirect // Работа с HOC\r\n) (UsersContainer);\r\n\r\n\r\n//// Аналогичный код mapDispatchToProps (connect делает проеобразование автоматически)\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         follow: (userId) => {\r\n//             dispatch(followAC(userId))\r\n//         },\r\n//\r\n//         unfollow: (userId) => {\r\n//             dispatch(unfollowAC(userId))\r\n//         },\r\n//\r\n//         setUsers: (users) => {\r\n//             dispatch(setUsersAC(users))\r\n//         },\r\n//\r\n//         setCurrentPage: (pageNumber) => {\r\n//             dispatch(setCurrentPageAC(pageNumber))\r\n//         },\r\n//\r\n//         setTotalUsersCount: (totalCount) => {\r\n//             dispatch(setUsersTotalCountAC(totalCount))\r\n//         },\r\n//\r\n//         toggleIsFetching: (isFetching) => {\r\n//             dispatch(toggleIsFetchingAC(isFetching))\r\n//         }\r\n//\r\n//     };\r\n// };\r\n// export default connect(mapStateToProps, mapDispatchToProps) (UsersContainer);","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n// Type (TS)\r\nexport type MapPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\n// FC\r\nconst Header: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src='http://pngimg.com/uploads/car_logo/car_logo_PNG1640.png' />\r\n\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Log out</button> </div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import {instance, ResultCodeForCaptchaEnum, ResultCodesEnum, APIResponseType} from \"./api\";\r\n\r\n// Type (TS)\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\n\r\n// API\r\nexport const authAPI = {\r\n    // Header\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\r\n    },\r\n\r\n    // Логинизация и выход\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data);\r\n    },\r\n\r\n    logout() {\r\n        return instance.delete(`auth/login`).then(res => res.data);\r\n    }\r\n};","import {instance} from \"./api\";\r\n\r\n// Type (TS)\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\n// API\r\nexport const securityAPI = {\r\n    // Captcha\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data);\r\n    }\r\n\r\n};","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {authAPI} from \"../api/authAPI\";\r\nimport {securityAPI} from \"../api/securityAPI\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./reduxStore\";\r\n\r\n// const SET_USER_DATA = 'SN/AUTH/SET-USER-DATA';\r\n// const GET_CAPTCHA_URL_SUCCESS = 'SN/AUTH/GET-CAPTCHA-URL-SUCCESS';\r\n\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null // Если null, тогда captcha не обязательна\r\n};\r\n\r\n// Type (TS)\r\nexport type InitialStateType = typeof initialState\r\n\r\n// Reducer\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/AUTH/SET-USER-DATA\":\r\n        case 'SN/AUTH/GET-CAPTCHA-URL-SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n\r\n        default :\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n// Action Creator (AC)\r\n// Type (TS) AC\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'SN/AUTH/SET-USER-DATA',\r\n        payload: {userId, email, login, isAuth}\r\n    } as const),\r\n\r\n    getCaptchaUrlSuccess: (captchaUrl: null | string) => ({\r\n        type: 'SN/AUTH/GET-CAPTCHA-URL-SUCCESS',\r\n        payload: {captchaUrl}\r\n    } as const)\r\n}\r\n\r\n\r\n// Thunks creators\r\n// Type (TS) Thunk\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    // Возвращение общего promise (me + then) для инициализации, код также выполняет свои действия*\r\n    let meData = await authAPI.me();\r\n\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n};\r\n\r\n// Логинизация, captcha и выход\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let loginData = await authAPI.login(email, password, rememberMe, captcha);\r\n\r\n    if (loginData.resultCode === ResultCodesEnum.Success) {\r\n        // Dispatch thunk\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        if (loginData.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n\r\n        // Обработка серверной валидации с redux-form\r\n        let message = loginData.messages.length > 0 ? loginData.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message})); // Dispatch action creator (AC) stopSubmit\r\n    }\r\n\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl();\r\n\r\n    const captchaUrl = data.url;\r\n\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let logoutData = await authAPI.logout();\r\n\r\n    if (logoutData.resultCode === ResultCodesEnum.Success) {\r\n        // Dispatch thunk\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n};\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header, {DispatchPropsType, MapPropsType} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\n\r\n// CC\r\nclass HeaderContainer extends React.Component<MapPropsType & DispatchPropsType> {\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n});\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {logout})(HeaderContainer);","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport styles from \"./../common/FormsControls/FormControls.module.css\"\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\n// Type (TS)\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        // Redux-form прокидывает в props (handleSubmit)\r\n        <form onSubmit={handleSubmit}>\r\n            {/* Поля формы авторизации */}\r\n            <div>\r\n                <Field name=\"email\" component={Input} type=\"text\" placeholder=\"Email\" validate={[required]}/>\r\n            </div>\r\n\r\n            <div>\r\n                <Field name=\"password\" component={Input} type=\"password\" placeholder=\"Password\" validate={[required]}/>\r\n            </div>\r\n\r\n            <div>\r\n                <Field name=\"rememberMe\" component={Input} type=\"checkbox\"/> remember me\r\n            </div>\r\n\r\n            {/* Captcha */}\r\n            {captchaUrl && <img src={captchaUrl} alt=\"captcha\"/>}\r\n            {captchaUrl &&\r\n            <div>\r\n                <Field name=\"captcha\" component={Input} placeholder=\"Symbols from image\" validate={[required]} />\r\n            </div>}\r\n\r\n\r\n            {/* Валидационные ошибки */}\r\n            {error && <div className={styles.formSummaryError}> {error} </div>}\r\n\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\n// Обертка redux-from для нашей компоненты (LoginForm)\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    // a unique name for the form (уникальное имя для данной формы)\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\n\r\n// Type (TS)\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\ntype LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\n// export type LoginFormValuesTypeKeys = keyof LoginFormValuesType // получить ключи типа\r\n// export type LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string> // получить только те ключи, которые имеют тип string\r\n\r\n// Основная компонента в которой будет находится наша форма (LoginReduxForm)\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    // Функция для получения данных форм\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to=\"/profile\"/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n\r\n            <p><b>Используйте следующие email и password:</b></p>\r\n            <p><b>login:</b> free@samuraijs.com</p>\r\n            <p><b>password:</b> free</p>\r\n\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n});\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","// Type TS\r\nlet initialState = {};\r\ntype InitialStateType = typeof initialState\r\n\r\n// Reducer\r\nconst sidebarReducer = (state = initialState, action: any) => {\r\n    return state;\r\n}\r\n\r\nexport default  sidebarReducer;","import {getAuthUserData} from \"./authReducer\";\r\nimport {InferActionsTypes} from \"./reduxStore\";\r\n\r\n// const INITIALIZED_SUCCESS = 'SN/APP/INITIALIZED-SUCCESS';\r\n\r\n// Type (TS)\r\n// Initial State App\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\n// Reducer\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED-SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n\r\n        default :\r\n            return state;\r\n    }\r\n};\r\n\r\n// Type (TS)\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\n// Action Creator (AC)\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED-SUCCESS'} as const),\r\n\r\n}\r\n\r\n// Thunks creators\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n\r\n    // Возвращение всех промисов ответов\r\n    Promise.all([promise]).then(() => {\r\n        // Изменение в state (initialized: true)\r\n        dispatch(actions.initializedSuccess());\r\n    })\r\n};\r\n\r\n\r\nexport default appReducer;","// BLL\r\nimport {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport sidebarReducer from \"./sidebarReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport appReducer from \"./appReducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'; // redux-from (HOC)\r\n\r\n\r\nconst rootReducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer // redux-from (reducer)\r\n});\r\n\r\n// Type (TS)\r\ntype RootReducerType =  typeof rootReducers // (globalState: AppStateType) => AppStateType\r\nexport type AppStateType = ReturnType<RootReducerType> // ReturnType - функция TS, которая возвращает тип // AppStateType = { profilePage: profileReducer, dialogsPage: ..., ...)\r\n\r\n// Type (TS) (AC)\r\nexport type InferActionsTypes<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\r\n\r\n// Type (TS) (Thunk)\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A> // Второй вариант (рекомендасьон от Redux)\r\n\r\n// Расширение Redux\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n\r\n// const store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default  store;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport {BrowserRouter, HashRouter, Redirect, Route, withRouter} from \"react-router-dom\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport LoginPage from \"./components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport store, {AppStateType} from \"./redux/reduxStore\";\nimport {withSuspense} from \"./hoc/withSuspense\";\nimport {initializeApp} from \"./redux/appReducer\";\n\n// Lazy loaded\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\n\n\n// Type (TS)\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\n// (HOC) Component\nconst SuspenseProfile = withSuspense(ProfileContainer);\n\n// CC\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n    // catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n    //     alert(\"Упс... ошибочка!\");\n    // }\n\n    componentDidMount() {\n        // Dispatch(thunk)\n        this.props.initializeApp();\n\n        // Error handling\n        // window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n\n    // componentWillUnmount() {\n    //     // Удаление прослушивания при удалении компоненты (уборка мусора)\n    //     window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    // }\n\n    render() {\n\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    {/* Редирект на страницу профиля */}\n                    <Redirect from=\"/\" to=\"/profile\" />\n\n                    <Route path=\"/profile/:userId?\" render={() => <SuspenseProfile />} />\n\n                    {/*Для примера Роутнинг диалогов в старом варианте*/}\n                    <Route path=\"/dialogs\" render={() => {\n                        return (\n                            <React.Suspense fallback={<div>Loading...</div>}>\n                                <DialogsContainer/>\n                            </React.Suspense>\n                        )\n                    }}/>\n\n                    <Route path=\"/users\" render={() => <UsersContainer pageTitle=\"Users\" />}/>\n\n                    <Route path=\"/login\" render={() => <LoginPage/>}/>\n                </div>\n            </div>\n        );\n    }\n};\n\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n});\n\n\n// App оборачиваем в контейнерную компоненту для передачи в неё необходимых данных\nconst AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))\n(App);\n\n\n// Дополнительная FC нужна для проведения тестов\nconst SamuraiJSApp: React.FC = () => {\n    return (\n        <HashRouter>\n            <Provider store={store}>\n                <AppContainer/>\n            </Provider>\n        </HashRouter>\n    )\n};\n\nexport default SamuraiJSApp;","import React from \"react\";\r\n\r\n\r\n// HOC\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return (\r\n            <React.Suspense fallback={<div>Loading...</div>}>\r\n                <WrappedComponent {...props} />\r\n            </React.Suspense>\r\n        )\r\n    };\r\n}","// UI\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SamuraiJSApp from \"./App\";\n\n\n// let rerenderEntireTree = () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <SamuraiJSApp />\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n// }\n\n\n// Старая версия\n// rerenderEntireTree();\n\n// store.subscribe(() => {\n//     let state = store.getState();\n//     rerenderEntireTree(state);\n// })\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","import React from \"react\";\r\nimport styles from \"./FormControls.module.css\"\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\n// Данная компонента нужна для того, чтобы избежать дублирование кода в обёртках (ниже)\r\n// Type (TS)\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n    // children: React.ReactNode // Эта типизация происходит автоматически (её не нужно делать)\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n};\r\n\r\n// Данные элементы являются обёртками стандартных элементов ввода для дальнейшего взаимодействия с ними\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    // const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    // const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n};\r\n\r\n// Старая версия\r\n// export const Textarea = ({input, meta, ...props}) => {\r\n//     const hasError = meta.touched && meta.error;\r\n//\r\n//     return (\r\n//         <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n//             <div>\r\n//                 <textarea {...input} {...props} />\r\n//             </div>\r\n//\r\n//             {hasError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// };","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__256RD\",\"error\":\"FormControls_error__w4shk\",\"formSummaryError\":\"FormControls_formSummaryError__1gb9J\"};","// Type (TS)\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\n// Validators\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (values) => {\r\n    if (values && values.length > maxLength)  return `Max length is ${maxLength} symbols`;\r\n\r\n    return  undefined;\r\n}","export default __webpack_public_path__ + \"static/media/preloader.4046923e.svg\";","import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\n\r\n\r\nlet Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img src={preloader} style={ {backgroundColor: \"white\"} } />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__mNApB\",\"pageNumber\":\"Paginator_pageNumber__3wrV8\",\"selectedPage\":\"Paginator_selectedPage__1IWls\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1iftm\",\"loginBlock\":\"Header_loginBlock__1EZJe\"};","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\n// Type (TS)\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\n// API\r\nexport const profileAPI = {\r\n    // Profile\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data);\r\n    },\r\n\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data);\r\n    },\r\n\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\r\n\r\n    },\r\n\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\r\n    }\r\n};","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\n// import {usersAPI} from \"../api/usersAPI\";\r\nimport {profileAPI} from \"../api/profileAPI\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./reduxStore\";\r\n\r\n\r\n// const ADD_POST = 'SN/PROFILE/ADD-POST';\r\n// // const UPDATE_NEW_POST_TEXT = 'SN/PROFILE/UPDATE-NEW-POST-TEXT'; // Старая версия (*)\r\n// const SET_USER_PROFILE = 'SN/PROFILE/SET-USER-PROFILE';\r\n// const SET_STATUS = 'SN/PROFILE/SET-STATUS';\r\n// const DELETE_POST = 'SN/PROFILE/DELETE-POST';\r\n// const SAVE_PHOTO_SUCCESS = 'SN/PROFILE/SAVE-PHOTO-SUCCESS';\r\n\r\n// Type (TS)\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 11}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: ''\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\n// Reducer\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD-POST': {\r\n            let newPost = {\r\n                id: 5,\r\n                // message: state.newPostText, // Старая версия (*)\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                // newPostText: '' // Старая версия (*)\r\n            };\r\n        }\r\n\r\n        // Старая версия\r\n        // case UPDATE_NEW_POST_TEXT: {\r\n        //     return {\r\n        //         ...state,\r\n        //         newPostText: action.newText\r\n        //     };\r\n        // };\r\n\r\n        case 'SN/PROFILE/SET-USER-PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n\r\n        case 'SN/PROFILE/SET-STATUS': {\r\n            return {...state, status: action.status}\r\n        }\r\n\r\n        case 'SN/PROFILE/DELETE-POST': {\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n        }\r\n\r\n        case 'SN/PROFILE/SAVE-PHOTO-SUCCESS': {\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n        }\r\n\r\n        default :\r\n            return state;\r\n    }\r\n};\r\n\r\n// Action creators\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET-USER-PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET-STATUS', status} as const),\r\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE-POST', postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE-PHOTO-SUCCESS', photos} as const)\r\n}\r\n// export const updateNewPostTextActionCreator = (text) => ({type: UPDATE_NEW_POST_TEXT, newText: text}); // Старая версия (*)\r\n\r\n// Type (TS) Action Type\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\n\r\n// Thunk creators\r\n// Type (TS) Thunk\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId);\r\n\r\n    dispatch(actions.setUserProfile(data));\r\n};\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        const data = await profileAPI.getStatus(userId);\r\n\r\n        dispatch(actions.setStatus(data));\r\n    } catch (error) {\r\n        // Перехват ошибки\r\n    }\r\n\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.updateStatus(status);\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status));\r\n    };\r\n};\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.savePhoto(file);\r\n\r\n    if(data.resultCode === 0 ) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    };\r\n};\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n\r\n    const data = await profileAPI.saveProfile(profile);\r\n\r\n    if (data.resultCode === 0 ) {\r\n        if (userId !== null) {\r\n            dispatch(getUserProfile(userId));\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n\r\n    } else {\r\n        dispatch(stopSubmit('edit-profile', {\"contacts\": {\"facebook\": data.messages[0]}}));\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n};\r\n\r\nexport default profileReducer;"],"sourceRoot":""}