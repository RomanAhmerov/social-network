{"version":3,"sources":["components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Message/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["DialogItem","props","to","id","StyledDialogItem","name","styled","div","Message","StyledMessageWrapper","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Button","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","Section","background","height","Container","padding","TitleSection","title","Flex","margin","StyledDialogsWrapper","values","sendMessage","newMessageBody","reset","mapStateToPropsForRedirect","isAuth","auth","compose","connect","app","theme","section","actions","WrappedComponent","restProps"],"mappings":"+LAoBeA,EARyB,SAACC,GACrC,OACI,cAAC,IAAD,CAASC,GAAI,YAAcD,EAAME,GAAjC,SACI,cAACC,EAAD,UAAmBH,EAAMI,UAQ/BD,EAAmBE,IAAOC,IAAV,8GCPLC,EANoB,SAACP,GACpC,OACI,cAACQ,EAAD,UAAuBR,EAAMS,WAQ7BD,EAAuBH,IAAOC,IAAV,oD,0CCPpBI,EAAcC,YAAiB,IAkBtBC,cAAoC,CAE/CC,KAAM,wBAFKD,EAfsF,SAACZ,GAClG,OACI,uBAAMc,SAAUd,EAAMe,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUV,GACrBN,KAAK,iBAAiBiB,YAAY,yBAG7C,cAACC,EAAA,EAAD,yB,gCCgCGC,EAlCsB,SAACvB,GAClC,IAAIwB,EAAQxB,EAAMyB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuBzB,KAAMyB,EAAEzB,KAAMF,GAAI2B,EAAE3B,IAA1B2B,EAAE3B,OAC5D4B,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoBvB,QAASuB,EAAEvB,SAAjBuB,EAAE9B,OAS/D,OACI,cAAC+B,EAAA,EAAD,CAASC,WAAYlC,EAAMkC,WAAYC,OAAO,OAA9C,SACI,eAACC,EAAA,EAAD,CAAWC,QAAQ,YAAYF,OAAO,OAAtC,UACI,cAACG,EAAA,EAAD,CAAcC,MAAM,aAEpB,eAACC,EAAA,EAAD,CAAMC,OAAO,aAAb,UACI,cAACC,EAAD,UACKhB,IAGL,eAACU,EAAA,EAAD,CAAWK,OAAO,aAAaJ,QAAQ,aAAvC,UACI,8BAAMP,IAEN,cAAC,EAAD,CAAqBhB,SAnBrB,SAAC6B,GACjB3C,EAAM4C,YAAYD,EAAOE,gBACzB7C,EAAM8C,MAAM,uCA4BdJ,EAAuBrC,IAAOC,IAAV,mD,GAKID,IAAOC,IAAV,uD,oCC1DvByC,EAA6B,SAACvB,GAAD,MAA0B,CACvDwB,OAAQxB,EAAMyB,KAAKD,S,oBCYRE,sBACXC,aAZoB,SAAC3B,GACvB,MAAO,CACHC,YAAaD,EAAMC,YAGnBS,WAAYV,EAAM4B,IAAIC,MAAMC,QAAQpB,cAO/B,YAAC,eAAqBqB,KAAtB,IAA+BT,cDFnC,SAA0BU,GAiB7B,OAAOL,YAAQJ,EAARI,EAfP,SAA2BnD,GACvB,IAAOgD,EAAwBhD,EAAxBgD,OAAWS,EAAlB,YAA+BzD,EAA/B,GAGA,OAAKgD,EAOE,cAACQ,EAAD,eAAsBC,IALrB,cAAC,IAAD,CAAUxD,GAAG,gBCPdiD,CAGb3B","file":"static/js/4.5892fdc9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\n// Type (TS)\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\n// FC\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <NavLink to={\"/dialogs/\" + props.id}>\r\n            <StyledDialogItem>{props.name}</StyledDialogItem>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\nexport default DialogItem;\r\n\r\n// Style\r\nconst StyledDialogItem = styled.div`\r\n  margin-bottom: 10px;\r\n  box-shadow: 0 2px 0 0 #3672f4;\r\n  \r\n  font-size: 30px;\r\n`","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport styled from \"styled-components\";\r\n\r\n// Type (TS)\r\ntype PropsType = {\r\n  message: string\r\n}\r\n\r\n// FC\r\nconst Message: React.FC<PropsType> = (props) => {\r\n  return (\r\n      <StyledMessageWrapper>{props.message}</StyledMessageWrapper>\r\n  );\r\n};\r\n\r\nexport  default  Message;\r\n\r\n\r\n// Style\r\nconst StyledMessageWrapper = styled.div`\r\n  margin-bottom: 15px;\r\n`","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport Button from \"../../StyledComponents/Button\";\r\nimport styled from \"styled-components\";\r\n\r\n// Type (TS)\r\ntype PropsType = {}\r\ntype NewMessageFormValuesType = {newMessageBody: string}\r\n\r\n\r\n// Валидация по максимальному кол-ву элементов\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\n// FC\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength50]}\r\n                       name=\"newMessageBody\" placeholder=\"Enter your message\"/>\r\n            </div>\r\n\r\n            <Button>Send</Button>\r\n        </form>\r\n    );\r\n};\r\n\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({\r\n    // a unique name for the form (уникальное имя для данной формы)\r\n    form: 'dialogAddMessageForm',\r\n}) (AddMessageForm);\r\n\r\n","import React from \"react\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddMessageReduxForm from \"./Message/AddMessageForm\";\r\nimport {InitialStateType} from \"../../redux/dialogsReducer\";\r\nimport {FormAction} from \"redux-form\";\r\nimport TitleSection from \"../StyledComponents/TitleSection\";\r\nimport Section from \"../StyledComponents/Section\";\r\nimport Container from \"../StyledComponents/Container\";\r\nimport Flex from \"../StyledComponents/Flex\";\r\nimport styled from \"styled-components\";\r\n\r\n// Type (TS)\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n    reset: (form: string) => FormAction\r\n\r\n    // Style\r\n    background: string\r\n}\r\n\r\n// FC\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>);\r\n\r\n    // Функция для onSubmit (redux-form)\r\n    let addNewMessage = (values: {newMessageBody: string}) => {\r\n        props.sendMessage(values.newMessageBody);\r\n        props.reset('dialogAddMessageForm')\r\n    };\r\n\r\n\r\n    return (\r\n        <Section background={props.background} height='100%'>\r\n            <Container padding='10px 30px' height='100%'>\r\n                <TitleSection title='Messages'/>\r\n\r\n                <Flex margin='40px 0 0 0'>\r\n                    <StyledDialogsWrapper>\r\n                        {dialogsElements}\r\n                    </StyledDialogsWrapper>\r\n\r\n                    <Container margin='0 0 0 20px' padding='0 0 0 20px'>\r\n                        <div>{messagesElements}</div>\r\n\r\n                        <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n                    </Container>\r\n                </Flex>\r\n            </Container>\r\n        </Section>\r\n    );\r\n};\r\n\r\nexport default Dialogs;\r\n\r\n// Style\r\nconst StyledDialogsWrapper = styled.div`\r\n    min-width: 200px;\r\n`\r\n\r\n// Style\r\nconst StyledMessagesWrapper = styled.div`\r\n  padding-left: 20px;\r\n\r\n\r\n`","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\n\r\n\r\n// Данные (props) небходимые HOC\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\n// Type (TS)\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\n// HOC\r\nexport function withAuthRedirect(WrappedComponent: React.ComponentType) {\r\n\r\n    function RedirectComponent(props:  MapPropsType) {\r\n        const {isAuth, ...restProps} = props;\r\n\r\n        // Redirect при отсутствие авторизации\r\n        if (!isAuth) {\r\n            return (\r\n                <Redirect to='/login'/>\r\n            );\r\n        }\r\n        ;\r\n\r\n        return <WrappedComponent {...restProps} />;\r\n    }\r\n\r\n    // Снабжение HOC необходимыми данными (props) с помощью connect (доп. оберткой)\r\n    return connect(mapStateToPropsForRedirect) (RedirectComponent);\r\n}","import React from \"react\";\r\nimport {actions} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {reset} from \"redux-form\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n      dialogsPage: state.dialogsPage,\r\n\r\n      // Style\r\n      background: state.app.theme.section.background\r\n  }\r\n};\r\n\r\n\r\n// Функция compose (хорошая практика)\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions, reset}),\r\n    withAuthRedirect  // Работа с HOC\r\n)(Dialogs)\r\n\r\n\r\n// Аналог (плохая практика)\r\n// // Работа с HOC\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps) (AuthRedirectComponent);\r\n\r\n// export default DialogsContainer;"],"sourceRoot":""}